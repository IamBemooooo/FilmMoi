// <auto-generated />
using System;
using FilmMoi.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmMoi.Models.Migrations
{
    [DbContext(typeof(FlimMoiContext))]
    [Migration("20240330062954_c")]
    partial class c
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Actors", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Comments", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_User");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Episodes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Film_Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.FilmActors", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_ACtor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ID_ACtor");

                    b.HasIndex("ID_Film");

                    b.ToTable("FilmActors");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Films", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.GenreFilms", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Genre")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_Genre");

                    b.ToTable("GenreFilms");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Genres", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Operations", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_User");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Ratings", b =>
                {
                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FilmID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.HasKey("ID_User", "ID_Film");

                    b.HasIndex("FilmID");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ID_Role")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.WatchedFilms", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("CurrentPosition")
                        .HasColumnType("time");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_User");

                    b.ToTable("WatchedFilms");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Comments", b =>
                {
                    b.HasOne("FilmMoi.Models.Models.Entities.Films", "Film")
                        .WithMany("Comments")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Models.Models.Entities.Users", "User")
                        .WithMany("Comments")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Episodes", b =>
                {
                    b.HasOne("FilmMoi.Models.Models.Entities.Films", "Film")
                        .WithMany("Episodes")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.FilmActors", b =>
                {
                    b.HasOne("FilmMoi.Models.Models.Entities.Actors", "Actor")
                        .WithMany("filmActors")
                        .HasForeignKey("ID_ACtor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Models.Models.Entities.Films", "Film")
                        .WithMany("filmActors")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.GenreFilms", b =>
                {
                    b.HasOne("FilmMoi.Models.Models.Entities.Films", "Film")
                        .WithMany("GenreFilms")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Models.Models.Entities.Genres", "Genre")
                        .WithMany("GenreFilms")
                        .HasForeignKey("ID_Genre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Operations", b =>
                {
                    b.HasOne("FilmMoi.Models.Models.Entities.Films", "Film")
                        .WithMany("Operations")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Models.Models.Entities.Users", "User")
                        .WithMany("Operations")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Ratings", b =>
                {
                    b.HasOne("FilmMoi.Models.Models.Entities.Films", "Film")
                        .WithMany()
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Models.Models.Entities.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Users", b =>
                {
                    b.HasOne("FilmMoi.Models.Models.Entities.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.WatchedFilms", b =>
                {
                    b.HasOne("FilmMoi.Models.Models.Entities.Films", "Film")
                        .WithMany("WatchedFilms")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Models.Models.Entities.Users", "User")
                        .WithMany("WatchedFilms")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Actors", b =>
                {
                    b.Navigation("filmActors");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Films", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("GenreFilms");

                    b.Navigation("Operations");

                    b.Navigation("WatchedFilms");

                    b.Navigation("filmActors");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Genres", b =>
                {
                    b.Navigation("GenreFilms");
                });

            modelBuilder.Entity("FilmMoi.Models.Models.Entities.Users", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Operations");

                    b.Navigation("WatchedFilms");
                });
#pragma warning restore 612, 618
        }
    }
}
