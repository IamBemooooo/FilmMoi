// <auto-generated />
using System;
using FilmMoi.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmMoi.Domain.Migrations
{
    [DbContext(typeof(FilmMoiContext))]
    [Migration("20240707045740_hht")]
    partial class hht
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Actors", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            ID = new Guid("7677bb7f-f9aa-4738-a61d-b52427d9dd62"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 11, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(4799), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1997, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor1.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kirigaya Kazuto",
                            Nationality = "Japan"
                        },
                        new
                        {
                            ID = new Guid("794b3996-aac6-437e-87c6-197fde46149d"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 11, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(4854), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1998, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor2.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Asuna Yuuki",
                            Nationality = "Japan"
                        },
                        new
                        {
                            ID = new Guid("e7ec9630-52da-4e31-9700-afe4627d672a"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 11, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(4858), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1990, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor3.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Levi Ackerman",
                            Nationality = "Japan"
                        },
                        new
                        {
                            ID = new Guid("68bae7e1-5703-47b6-98c4-cbddd1376404"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 11, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(4863), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1979, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor4.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hermione Granger",
                            Nationality = "America"
                        },
                        new
                        {
                            ID = new Guid("1db6fa81-88d2-46fb-8658-f3e85a3a1052"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 11, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(4881), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1984, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor5.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Scarlett Johansson",
                            Nationality = "America"
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Comments", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_User");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Episodes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Film_Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.FilmActors", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ID_ACtor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_ACtor");

                    b.HasIndex("ID_Film");

                    b.ToTable("FilmActors");

                    b.HasData(
                        new
                        {
                            ID = new Guid("fef703d0-4138-491d-9c3d-174d7c56dd64"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5504), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_ACtor = new Guid("7677bb7f-f9aa-4738-a61d-b52427d9dd62"),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("0f6d5661-ccfe-4796-9895-f3eb11b14d4c"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5512), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_ACtor = new Guid("794b3996-aac6-437e-87c6-197fde46149d"),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Films", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("AvgDuration")
                        .HasColumnType("time");

                    b.Property<int>("AvgRating")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalEpisode")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            ID = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(4927), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Anime cute",
                            Director = "Reki Kawahara",
                            Image = "series-1.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sword Art Online",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("d8a2e1e2-5d8c-4c4c-bf5f-9a7d32de0a2a"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(4946), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Frank Darabont",
                            Image = "series-2.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "The Shawshank Redemption",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("f5f7a014-9d4e-4c2e-a0b6-9b063f2e8f55"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(4951), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Christopher Nolan",
                            Image = "series-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Inception",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("7b6c8b8f-70da-4e89-9971-2f1a8e7f9b56"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(4955), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Quentin Tarantino",
                            Image = "series-4.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Pulp Fiction",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("3d9a9d16-1b45-4a9b-8f7e-e3f0e0d8e3b9"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(4960), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Christopher Nolan",
                            Image = "movie-1.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "The Dark Knight",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("c53fb043-fc8c-4de9-9d85-431ef13a38e1"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(4995), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director0",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film0",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("346bad25-2698-4da2-8cee-ab19b7ab720a"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5088), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director1",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film1",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("3bed06cb-73fb-44a6-9131-1c5f91991917"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5103), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director2",
                            Image = "movie-1.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film2",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("55698e40-b5b3-4d6c-9098-03d7bb7c911a"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5114), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director3",
                            Image = "movie-7.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film3",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("8005a86a-345d-4071-b220-f2fc4c612d16"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5120), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director4",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film4",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("7d194407-056d-458a-9e4d-472c9f1b7c75"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5130), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director5",
                            Image = "movie-6.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film5",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("b0c6211e-5c18-4d32-bde1-2bab8982ef59"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5137), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director6",
                            Image = "movie-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film6",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("f256be92-ce91-4faf-a67d-74ce918cc10e"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5143), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director7",
                            Image = "movie-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film7",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("483a1a9c-1dcb-40a2-b2bc-2547441bd684"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5152), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director8",
                            Image = "movie-1.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film8",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("f46e7a70-aa9c-4f14-89bf-71bf83cf92b2"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5160), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director9",
                            Image = "movie-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film9",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("b1087897-cbf5-4999-bd0c-43a518efd548"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5166), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director10",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film10",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("7d61831b-7be9-44dd-9730-90f6f68ca3e9"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5176), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director11",
                            Image = "movie-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film11",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("ea8df262-4db6-46a8-a028-9964f7e3430b"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5182), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director12",
                            Image = "movie-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film12",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("d734a0c7-5a92-4965-8ce5-721173d71593"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5191), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director13",
                            Image = "movie-7.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film13",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("774d2aac-e9bd-453a-8094-2bf30d63c171"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5198), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director14",
                            Image = "movie-2.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film14",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("b081cf8c-486c-4ae6-b3ec-325b78d907f4"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5203), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director15",
                            Image = "movie-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film15",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("5c4dd9ca-062b-4fdb-8ab0-e7b7baa8fc35"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5212), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director16",
                            Image = "movie-4.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film16",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("3086e700-aa47-4986-b50e-c1d855527174"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5220), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director17",
                            Image = "movie-2.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film17",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("b99f4817-8928-4ae2-8f73-1433d7e31d90"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5233), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director18",
                            Image = "movie-4.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film18",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("f5938ab0-9c03-4b79-9f6b-28d091b1060b"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5242), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director19",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film19",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("a06cbdad-d9d7-4b91-bcdb-81392b819ad8"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5248), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director20",
                            Image = "movie-7.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film20",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("737835dd-de6b-4485-b553-ee15900c8635"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5257), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director21",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film21",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("8c58110d-c029-4632-abca-6d2ca226610b"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5263), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director22",
                            Image = "movie-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film22",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("1887ee29-d8db-43e1-b28b-923e00b5e9c4"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5269), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director23",
                            Image = "movie-1.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film23",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("0906787f-1694-4aca-a686-0f081bf0e132"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5278), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director24",
                            Image = "movie-7.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film24",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("8450889b-85e2-459b-80d3-c7d7d5ebeda4"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5284), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director25",
                            Image = "movie-7.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film25",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("e6b64f4d-6980-4667-a6bf-2452ceaa3581"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5290), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director26",
                            Image = "movie-2.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film26",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("b40e01d4-11d3-4fb8-82b5-be94ad9c7d96"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5299), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director27",
                            Image = "movie-6.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film27",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("f3e4ce4e-847f-4005-bcad-439114683672"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5305), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director28",
                            Image = "movie-1.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film28",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("39463206-5743-4234-bafb-5d6e4ad5dad7"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            AvgRating = 0,
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5314), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director29",
                            Image = "movie-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film29",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.GenreFilms", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Genre")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_Genre");

                    b.ToTable("GenreFilms");

                    b.HasData(
                        new
                        {
                            ID = new Guid("4940de1d-5fd0-4736-8c0a-662b78cd8ca4"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5545), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            ID_Genre = new Guid("cd19b97d-2377-41bb-99dc-7db8314ff35e"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("6bd33d39-d76b-43c8-ac5a-4f6fee78f94f"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5551), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_Film = new Guid("d8a2e1e2-5d8c-4c4c-bf5f-9a7d32de0a2a"),
                            ID_Genre = new Guid("836c97c0-2ad2-4cd9-b821-537a8a872354"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Genres", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            ID = new Guid("cd19b97d-2377-41bb-99dc-7db8314ff35e"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5352), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Anime",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("088f52ea-8a6d-4bb5-8bb8-2cd647e9b0f4"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5358), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Chinese",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("52048ea3-02c1-4c1c-81e0-0e5de6b16b07"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5361), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Korea",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("836c97c0-2ad2-4cd9-b821-537a8a872354"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5370), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Romantic",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("d5c9f4da-131e-47b6-b41f-a91409bb5d3a"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5373), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Action",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Ratings", b =>
                {
                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ID_User", "ID_Film");

                    b.HasIndex("ID_Film");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            ID_User = new Guid("f69cd789-4c44-401c-a021-5b6742af2279"),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5469), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Rating = 5
                        },
                        new
                        {
                            ID_User = new Guid("f69cd789-4c44-401c-a021-5b6742af2279"),
                            ID_Film = new Guid("d8a2e1e2-5d8c-4c4c-bf5f-9a7d32de0a2a"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 57, 39, 988, DateTimeKind.Unspecified).AddTicks(5474), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Rating = 5
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a884280c-dd19-4022-85bd-7105c59b27f9"),
                            ConcurrencyStamp = "f6b25b9e-5ef2-4aaf-9e9b-7ae4fdac2e2b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("a040eef1-1d71-437e-ac64-e94d0b65c856"),
                            ConcurrencyStamp = "92ed2915-6aa0-4a86-8e7a-8f828d8d9e1f",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("SentTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e24d664c-e45f-4ddb-8743-04812e1ca9f5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6b25b9e-5ef2-4aaf-9e9b-7ae4fdac2e2b",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "dangs3007@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "DANGS3007@GMAIL.COM",
                            NormalizedUserName = "DANGS",
                            PasswordHash = "AQAAAAEAACcQAAAAEKY9X1b1Y2X9z8x2C9jzFz2JbYfhLzzKm3Q/7+YpY6XjyONn6m8fJ6iM0Wb8PfFy1A==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            RoleId = new Guid("a884280c-dd19-4022-85bd-7105c59b27f9"),
                            SecurityStamp = "XQYOWUD3KZAC3K6A3OJ3M7NJI3J4D7YX",
                            TwoFactorEnabled = false,
                            UserName = "dangs"
                        },
                        new
                        {
                            Id = new Guid("84f0e463-e887-4143-a994-61ca73c4793c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92ed2915-6aa0-4a86-8e7a-8f828d8d9e1f",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "thend@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "THEND@GMAIL.COM",
                            NormalizedUserName = "THEND",
                            PasswordHash = "AQAAAAEAACcQAAAAEKY9X1b1Y2X9z8x2C9jzFz2JbYfhLzzKm3Q/7+YpY6XjyONn6m8fJ6iM0Wb8PfFy1A==",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = true,
                            RoleId = new Guid("a884280c-dd19-4022-85bd-7105c59b27f9"),
                            SecurityStamp = "7S43J6OZ5E3H3Z2M3I2P8X7R7U5W2E7B",
                            TwoFactorEnabled = false,
                            UserName = "thend"
                        },
                        new
                        {
                            Id = new Guid("f69cd789-4c44-401c-a021-5b6742af2279"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d1c77f2-9b7e-4f5d-b0e6-3d13c7a4cc09",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "dangs123@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "DANGS123@GMAIL.COM",
                            NormalizedUserName = "CLIENTEST",
                            PasswordHash = "AQAAAAEAACcQAAAAEKY9X1b1Y2X9z8x2C9jzFz2JbYfhLzzKm3Q/7+YpY6XjyONn6m8fJ6iM0Wb8PfFy1A==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            RoleId = new Guid("a040eef1-1d71-437e-ac64-e94d0b65c856"),
                            SecurityStamp = "4b051b8e-4b64-4a2a-94e6-3f8a3b43b2c7",
                            TwoFactorEnabled = false,
                            UserName = "clienttest"
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.WatchedFilms", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("CurrentPosition")
                        .HasColumnType("time");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_User");

                    b.ToTable("WatchedFilms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Comments", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("Comments")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Users", "User")
                        .WithMany("Comments")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Episodes", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("Episodes")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.FilmActors", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Actors", "Actor")
                        .WithMany("filmActors")
                        .HasForeignKey("ID_ACtor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("filmActors")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.GenreFilms", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("GenreFilms")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Genres", "Genre")
                        .WithMany("GenreFilms")
                        .HasForeignKey("ID_Genre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Ratings", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("Ratings")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Users", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Users", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Roles", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.WatchedFilms", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("WatchedFilms")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Users", "User")
                        .WithMany("WatchedFilms")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Actors", b =>
                {
                    b.Navigation("filmActors");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Films", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("GenreFilms");

                    b.Navigation("Ratings");

                    b.Navigation("WatchedFilms");

                    b.Navigation("filmActors");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Genres", b =>
                {
                    b.Navigation("GenreFilms");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Users", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");

                    b.Navigation("WatchedFilms");
                });
#pragma warning restore 612, 618
        }
    }
}
