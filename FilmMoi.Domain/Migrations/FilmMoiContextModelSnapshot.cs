// <auto-generated />
using System;
using FilmMoi.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmMoi.Domain.Migrations
{
    [DbContext(typeof(FilmMoiContext))]
    partial class FilmMoiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Actors", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            ID = new Guid("7677bb7f-f9aa-4738-a61d-b52427d9dd62"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 11, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(8870), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1997, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor1.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kirigaya Kazuto",
                            Nationality = "Japan"
                        },
                        new
                        {
                            ID = new Guid("794b3996-aac6-437e-87c6-197fde46149d"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 11, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(8932), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1998, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor2.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Asuna Yuuki",
                            Nationality = "Japan"
                        },
                        new
                        {
                            ID = new Guid("e7ec9630-52da-4e31-9700-afe4627d672a"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 11, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(8939), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1990, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor3.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Levi Ackerman",
                            Nationality = "Japan"
                        },
                        new
                        {
                            ID = new Guid("dd16849f-2802-4b3d-a07f-28b3cb097d3a"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 11, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(8945), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1979, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor4.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hermione Granger",
                            Nationality = "America"
                        },
                        new
                        {
                            ID = new Guid("68f67614-7bae-41fe-94ac-5507d1fb53ba"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 11, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(8950), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1984, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor5.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Scarlett Johansson",
                            Nationality = "America"
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Comments", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_User");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Episodes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Film_Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.FilmActors", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ID_ACtor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_ACtor");

                    b.HasIndex("ID_Film");

                    b.ToTable("FilmActors");

                    b.HasData(
                        new
                        {
                            ID = new Guid("873a8f31-3a64-469d-a163-4250357043f9"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9807), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_ACtor = new Guid("7677bb7f-f9aa-4738-a61d-b52427d9dd62"),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("d84535b8-ab5e-4eea-9ebb-c92eaf3efe8d"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9821), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_ACtor = new Guid("794b3996-aac6-437e-87c6-197fde46149d"),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Films", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("AvgDuration")
                        .HasColumnType("time");

                    b.Property<int?>("AvgRating")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TotalEpisode")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            ID = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9010), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Anime cute",
                            Director = "Reki Kawahara",
                            Image = "series-1.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sword Art Online",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("d8a2e1e2-5d8c-4c4c-bf5f-9a7d32de0a2a"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9029), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Frank Darabont",
                            Image = "series-2.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "The Shawshank Redemption",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("f5f7a014-9d4e-4c2e-a0b6-9b063f2e8f55"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9038), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Christopher Nolan",
                            Image = "series-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Inception",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("7b6c8b8f-70da-4e89-9971-2f1a8e7f9b56"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9055), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Quentin Tarantino",
                            Image = "series-4.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Pulp Fiction",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("3d9a9d16-1b45-4a9b-8f7e-e3f0e0d8e3b9"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9062), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Christopher Nolan",
                            Image = "movie-1.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "The Dark Knight",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("82b3ef21-5f2f-4f35-af2f-733d38aff904"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9119), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director0",
                            Image = "movie-6.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film0",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("d9ad2188-c824-448e-8b44-fa6dd67c15e1"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9235), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director1",
                            Image = "movie-6.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film1",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("5686a2ef-c048-444b-b6ee-58282bb2fa6e"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9245), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director2",
                            Image = "movie-4.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film2",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("f32e5443-ea5a-4eca-afee-bc37a3200ab1"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9254), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director3",
                            Image = "movie-4.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film3",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("0b11de38-c826-46d2-aff9-f3f7db8f1380"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9268), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director4",
                            Image = "movie-7.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film4",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("828ec340-b719-4433-b358-d45ae2c43b11"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9278), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director5",
                            Image = "movie-6.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film5",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("60b49a99-e8fb-42e3-86e8-4a3c2c88c34a"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9287), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director6",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film6",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("28c671a4-10c7-4111-801f-7d63bf118d5c"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9299), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director7",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film7",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("b10843b2-2cee-4b83-ae93-7b68683f400a"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9308), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director8",
                            Image = "movie-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film8",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("e48cf1e9-1300-437c-a5e8-e87bd37c045e"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9323), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director9",
                            Image = "movie-2.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film9",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("ddfa69cd-ccab-423e-a914-325c8cfa3ef6"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9331), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director10",
                            Image = "movie-1.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film10",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("1f7ea1b1-114e-4501-9bdd-7f7c649cbb2b"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9341), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director11",
                            Image = "movie-2.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film11",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("70daba39-391a-4628-ba20-ff2f51f75cdc"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9354), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director12",
                            Image = "movie-7.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film12",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("3776292f-33b6-46c3-9956-1c9b71dea911"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9363), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director13",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film13",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("4a7089ad-07e4-4d37-a069-c9c0fb03bb85"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9372), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director14",
                            Image = "movie-2.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film14",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("84c65a1f-610e-4bcd-b922-876479366808"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9395), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director15",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film15",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("ab1ccf66-4fb0-49dc-a785-2b64bb723473"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9404), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director16",
                            Image = "movie-6.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film16",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("7ddc834a-ec72-45fa-ac9d-610fafdcfb81"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9419), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director17",
                            Image = "movie-7.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film17",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("ca8c309d-d84b-4bc0-96c9-97ae0d99de3b"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9429), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director18",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film18",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("12ece4db-c8a9-4805-99bd-aa574684adb7"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9438), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director19",
                            Image = "movie-6.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film19",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("de09a17d-d332-4a6b-9a2b-2a24fb82a56b"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9450), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director20",
                            Image = "movie-1.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film20",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("e363bc29-c6ca-41a5-bdc2-a13369433755"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9458), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director21",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film21",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("646af27f-e3db-4ee7-a36d-a1333e58865d"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9468), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director22",
                            Image = "movie-6.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film22",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("2e130761-957d-4d0e-beb0-fc1fe1df5479"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9480), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director23",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film23",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("8c3d9793-174b-4097-b47f-c375317a541d"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9489), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director24",
                            Image = "movie-4.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film24",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("e1aad308-c2b0-4ddd-a595-9eb4e9a88ee6"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9500), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director25",
                            Image = "movie-2.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film25",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("c445faef-de3e-430f-a376-3cc9a30420e9"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9509), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director26",
                            Image = "movie-7.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film26",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("ad994872-75a4-44cf-9ef9-3bb2b7178ac7"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9517), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director27",
                            Image = "movie-3.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film27",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("41e94909-f48a-4e90-b162-7bc0ecd846f4"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9529), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director28",
                            Image = "movie-5.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film28",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("2e35322e-58ef-4bba-b93f-683d8f88d6bc"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9546), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Director29",
                            Image = "movie-6.png",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Film29",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.GenreFilms", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Genre")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_Genre");

                    b.ToTable("GenreFilms");

                    b.HasData(
                        new
                        {
                            ID = new Guid("f6c81586-f136-4974-8179-13fbd425bf28"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9870), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            ID_Genre = new Guid("cd19b97d-2377-41bb-99dc-7db8314ff35e"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("2a08d9fc-157e-450f-9f0d-a1ce51540a49"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9879), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_Film = new Guid("d8a2e1e2-5d8c-4c4c-bf5f-9a7d32de0a2a"),
                            ID_Genre = new Guid("836c97c0-2ad2-4cd9-b821-537a8a872354"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Genres", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            ID = new Guid("cd19b97d-2377-41bb-99dc-7db8314ff35e"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9599), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Anime",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("088f52ea-8a6d-4bb5-8bb8-2cd647e9b0f4"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9606), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Chinese",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("52048ea3-02c1-4c1c-81e0-0e5de6b16b07"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9609), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Korea",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("836c97c0-2ad2-4cd9-b821-537a8a872354"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9612), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Romantic",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("d5c9f4da-131e-47b6-b41f-a91409bb5d3a"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9616), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Action",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Ratings", b =>
                {
                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ID_User", "ID_Film");

                    b.HasIndex("ID_Film");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            ID_User = new Guid("f69cd789-4c44-401c-a021-5b6742af2279"),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9757), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Rating = 5
                        },
                        new
                        {
                            ID_User = new Guid("f69cd789-4c44-401c-a021-5b6742af2279"),
                            ID_Film = new Guid("d8a2e1e2-5d8c-4c4c-bf5f-9a7d32de0a2a"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 7, 7, 4, 59, 43, 116, DateTimeKind.Unspecified).AddTicks(9765), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Rating = 5
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a884280c-dd19-4022-85bd-7105c59b27f9"),
                            ConcurrencyStamp = "f6b25b9e-5ef2-4aaf-9e9b-7ae4fdac2e2b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("a040eef1-1d71-437e-ac64-e94d0b65c856"),
                            ConcurrencyStamp = "92ed2915-6aa0-4a86-8e7a-8f828d8d9e1f",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("SentTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e24d664c-e45f-4ddb-8743-04812e1ca9f5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6b25b9e-5ef2-4aaf-9e9b-7ae4fdac2e2b",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "dangs3007@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "DANGS3007@GMAIL.COM",
                            NormalizedUserName = "DANGS",
                            PasswordHash = "AQAAAAEAACcQAAAAEKY9X1b1Y2X9z8x2C9jzFz2JbYfhLzzKm3Q/7+YpY6XjyONn6m8fJ6iM0Wb8PfFy1A==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            RoleId = new Guid("a884280c-dd19-4022-85bd-7105c59b27f9"),
                            SecurityStamp = "XQYOWUD3KZAC3K6A3OJ3M7NJI3J4D7YX",
                            TwoFactorEnabled = false,
                            UserName = "dangs"
                        },
                        new
                        {
                            Id = new Guid("84f0e463-e887-4143-a994-61ca73c4793c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92ed2915-6aa0-4a86-8e7a-8f828d8d9e1f",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "thend@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "THEND@GMAIL.COM",
                            NormalizedUserName = "THEND",
                            PasswordHash = "AQAAAAEAACcQAAAAEKY9X1b1Y2X9z8x2C9jzFz2JbYfhLzzKm3Q/7+YpY6XjyONn6m8fJ6iM0Wb8PfFy1A==",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = true,
                            RoleId = new Guid("a884280c-dd19-4022-85bd-7105c59b27f9"),
                            SecurityStamp = "7S43J6OZ5E3H3Z2M3I2P8X7R7U5W2E7B",
                            TwoFactorEnabled = false,
                            UserName = "thend"
                        },
                        new
                        {
                            Id = new Guid("f69cd789-4c44-401c-a021-5b6742af2279"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d1c77f2-9b7e-4f5d-b0e6-3d13c7a4cc09",
                            CreatedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "dangs123@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "DANGS123@GMAIL.COM",
                            NormalizedUserName = "CLIENTEST",
                            PasswordHash = "AQAAAAEAACcQAAAAEKY9X1b1Y2X9z8x2C9jzFz2JbYfhLzzKm3Q/7+YpY6XjyONn6m8fJ6iM0Wb8PfFy1A==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            RoleId = new Guid("a040eef1-1d71-437e-ac64-e94d0b65c856"),
                            SecurityStamp = "4b051b8e-4b64-4a2a-94e6-3f8a3b43b2c7",
                            TwoFactorEnabled = false,
                            UserName = "clienttest"
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.WatchedFilms", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("CurrentPosition")
                        .HasColumnType("time");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_User");

                    b.ToTable("WatchedFilms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Comments", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("Comments")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Users", "User")
                        .WithMany("Comments")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Episodes", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("Episodes")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.FilmActors", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Actors", "Actor")
                        .WithMany("filmActors")
                        .HasForeignKey("ID_ACtor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("filmActors")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.GenreFilms", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("GenreFilms")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Genres", "Genre")
                        .WithMany("GenreFilms")
                        .HasForeignKey("ID_Genre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Ratings", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("Ratings")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Users", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Users", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Roles", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.WatchedFilms", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("WatchedFilms")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Users", "User")
                        .WithMany("WatchedFilms")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Actors", b =>
                {
                    b.Navigation("filmActors");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Films", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("GenreFilms");

                    b.Navigation("Ratings");

                    b.Navigation("WatchedFilms");

                    b.Navigation("filmActors");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Genres", b =>
                {
                    b.Navigation("GenreFilms");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Users", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");

                    b.Navigation("WatchedFilms");
                });
#pragma warning restore 612, 618
        }
    }
}
