// <auto-generated />
using System;
using FilmMoi.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmMoi.Domain.Migrations
{
    [DbContext(typeof(FlimMoiContext))]
    partial class FlimMoiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Actors", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            ID = new Guid("7677bb7f-f9aa-4738-a61d-b52427d9dd62"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 17, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(3949), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1997, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor1.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Kirigaya Kazuto",
                            Nationality = "Japan"
                        },
                        new
                        {
                            ID = new Guid("794b3996-aac6-437e-87c6-197fde46149d"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 17, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(3993), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1998, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor2.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Asuna Yuuki",
                            Nationality = "Japan"
                        },
                        new
                        {
                            ID = new Guid("e7ec9630-52da-4e31-9700-afe4627d672a"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 17, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(3996), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1990, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor3.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Levi Ackerman",
                            Nationality = "Japan"
                        },
                        new
                        {
                            ID = new Guid("e4e55994-0c7d-44ec-b033-337c95797d35"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 17, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(3999), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1979, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor4.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Hermione Granger",
                            Nationality = "America"
                        },
                        new
                        {
                            ID = new Guid("25801504-21c3-4ec1-9f4c-2a9941b5688e"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 17, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4001), new TimeSpan(0, 7, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Dob = new DateTime(1984, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "actor5.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Scarlett Johansson",
                            Nationality = "America"
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Comments", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_User");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Episodes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Film_Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.FilmActors", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ID_ACtor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_ACtor");

                    b.HasIndex("ID_Film");

                    b.ToTable("FilmActors");

                    b.HasData(
                        new
                        {
                            ID = new Guid("142afd15-5af3-4856-bb98-c271a0320318"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4167), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_ACtor = new Guid("7677bb7f-f9aa-4738-a61d-b52427d9dd62"),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("fdd7731e-56c5-4dd2-a1d6-c11d9bc0e917"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4181), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_ACtor = new Guid("794b3996-aac6-437e-87c6-197fde46149d"),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Films", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("AvgDuration")
                        .HasColumnType("time");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalEpisode")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            ID = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4039), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Anime cute",
                            Director = "Reki Kawahara",
                            Image = "film1.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Sword Art Online",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("d8a2e1e2-5d8c-4c4c-bf5f-9a7d32de0a2a"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4053), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Frank Darabont",
                            Image = "film2.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "The Shawshank Redemption",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("f5f7a014-9d4e-4c2e-a0b6-9b063f2e8f55"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4057), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Christopher Nolan",
                            Image = "film3.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Inception",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("7b6c8b8f-70da-4e89-9971-2f1a8e7f9b56"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4063), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Quentin Tarantino",
                            Image = "film4.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Pulp Fiction",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        },
                        new
                        {
                            ID = new Guid("3d9a9d16-1b45-4a9b-8f7e-e3f0e0d8e3b9"),
                            AvgDuration = new TimeSpan(0, 0, 0, 0, 0),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4066), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Movie cute",
                            Director = "Christopher Nolan",
                            Image = "film5.jpg",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "The Dark Knight",
                            Status = 1,
                            TotalEpisode = 0,
                            Year = 2024
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.GenreFilms", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Genre")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_Genre");

                    b.ToTable("GenreFilms");

                    b.HasData(
                        new
                        {
                            ID = new Guid("4a58988c-86a0-4de5-93c5-605b22dde61f"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4206), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            ID_Genre = new Guid("cd19b97d-2377-41bb-99dc-7db8314ff35e"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("988a90ec-31a6-4c82-a20b-76d62b6e6cb9"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4214), new TimeSpan(0, 0, 0, 0, 0)),
                            ID_Film = new Guid("d8a2e1e2-5d8c-4c4c-bf5f-9a7d32de0a2a"),
                            ID_Genre = new Guid("836c97c0-2ad2-4cd9-b821-537a8a872354"),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Genres", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            ID = new Guid("cd19b97d-2377-41bb-99dc-7db8314ff35e"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4097), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Anime",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("088f52ea-8a6d-4bb5-8bb8-2cd647e9b0f4"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4100), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Chinese",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("52048ea3-02c1-4c1c-81e0-0e5de6b16b07"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4102), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Korea",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("836c97c0-2ad2-4cd9-b821-537a8a872354"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4104), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Romantic",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            ID = new Guid("d5c9f4da-131e-47b6-b41f-a91409bb5d3a"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4106), new TimeSpan(0, 0, 0, 0, 0)),
                            Deleted = false,
                            DeletedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GenreName = "Action",
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Ratings", b =>
                {
                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ID_User", "ID_Film");

                    b.HasIndex("ID_Film");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            ID_User = new Guid("f69cd789-4c44-401c-a021-5b6742af2279"),
                            ID_Film = new Guid("98236a61-4d91-42fe-b956-fd64fb14ddc5"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4139), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Rating = 5
                        },
                        new
                        {
                            ID_User = new Guid("f69cd789-4c44-401c-a021-5b6742af2279"),
                            ID_Film = new Guid("d8a2e1e2-5d8c-4c4c-bf5f-9a7d32de0a2a"),
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 4, 17, 10, 29, 26, 441, DateTimeKind.Unspecified).AddTicks(4142), new TimeSpan(0, 0, 0, 0, 0)),
                            ModifiedTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Rating = 5
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Roles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a884280c-dd19-4022-85bd-7105c59b27f9"),
                            ConcurrencyStamp = "f6b25b9e-5ef2-4aaf-9e9b-7ae4fdac2e2b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("a040eef1-1d71-437e-ac64-e94d0b65c856"),
                            ConcurrencyStamp = "92ed2915-6aa0-4a86-8e7a-8f828d8d9e1f",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e24d664c-e45f-4ddb-8743-04812e1ca9f5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6b25b9e-5ef2-4aaf-9e9b-7ae4fdac2e2b",
                            Email = "dangs3007@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "DANGS3007@GMAIL.COM",
                            NormalizedUserName = "DANGS",
                            PasswordHash = "AQAAAAEAACcQAAAAEKY9X1b1Y2X9z8x2C9jzFz2JbYfhLzzKm3Q/7+YpY6XjyONn6m8fJ6iM0Wb8PfFy1A==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            RoleId = new Guid("a884280c-dd19-4022-85bd-7105c59b27f9"),
                            SecurityStamp = "XQYOWUD3KZAC3K6A3OJ3M7NJI3J4D7YX",
                            TwoFactorEnabled = false,
                            UserName = "dangs"
                        },
                        new
                        {
                            Id = new Guid("84f0e463-e887-4143-a994-61ca73c4793c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92ed2915-6aa0-4a86-8e7a-8f828d8d9e1f",
                            Email = "thend@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "THEND@GMAIL.COM",
                            NormalizedUserName = "THEND",
                            PasswordHash = "AQAAAAEAACcQAAAAEKY9X1b1Y2X9z8x2C9jzFz2JbYfhLzzKm3Q/7+YpY6XjyONn6m8fJ6iM0Wb8PfFy1A==",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = true,
                            RoleId = new Guid("a884280c-dd19-4022-85bd-7105c59b27f9"),
                            SecurityStamp = "7S43J6OZ5E3H3Z2M3I2P8X7R7U5W2E7B",
                            TwoFactorEnabled = false,
                            UserName = "thend"
                        },
                        new
                        {
                            Id = new Guid("f69cd789-4c44-401c-a021-5b6742af2279"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d1c77f2-9b7e-4f5d-b0e6-3d13c7a4cc09",
                            Email = "dangs123@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "DANGS123@GMAIL.COM",
                            NormalizedUserName = "CLIENTEST",
                            PasswordHash = "AQAAAAEAACcQAAAAEKY9X1b1Y2X9z8x2C9jzFz2JbYfhLzzKm3Q/7+YpY6XjyONn6m8fJ6iM0Wb8PfFy1A==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            RoleId = new Guid("a040eef1-1d71-437e-ac64-e94d0b65c856"),
                            SecurityStamp = "4b051b8e-4b64-4a2a-94e6-3f8a3b43b2c7",
                            TwoFactorEnabled = false,
                            UserName = "clienttest"
                        });
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.WatchedFilms", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("CurrentPosition")
                        .HasColumnType("time");

                    b.Property<Guid>("ID_Film")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ID");

                    b.HasIndex("ID_Film");

                    b.HasIndex("ID_User");

                    b.ToTable("WatchedFilms");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Comments", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("Comments")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Users", "User")
                        .WithMany("Comments")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Episodes", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("Episodes")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.FilmActors", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Actors", "Actor")
                        .WithMany("filmActors")
                        .HasForeignKey("ID_ACtor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("filmActors")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.GenreFilms", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("GenreFilms")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Genres", "Genre")
                        .WithMany("GenreFilms")
                        .HasForeignKey("ID_Genre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Ratings", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("Ratings")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Users", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Users", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Roles", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.WatchedFilms", b =>
                {
                    b.HasOne("FilmMoi.Domain.Models.Entities.Films", "Film")
                        .WithMany("WatchedFilms")
                        .HasForeignKey("ID_Film")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmMoi.Domain.Models.Entities.Users", "User")
                        .WithMany("WatchedFilms")
                        .HasForeignKey("ID_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Actors", b =>
                {
                    b.Navigation("filmActors");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Films", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("GenreFilms");

                    b.Navigation("Ratings");

                    b.Navigation("WatchedFilms");

                    b.Navigation("filmActors");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Genres", b =>
                {
                    b.Navigation("GenreFilms");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("FilmMoi.Domain.Models.Entities.Users", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ratings");

                    b.Navigation("WatchedFilms");
                });
#pragma warning restore 612, 618
        }
    }
}
